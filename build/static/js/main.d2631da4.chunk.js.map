{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","points","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sWA4BeA,MAxBf,YAAoE,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,MAAUC,EAAS,0DAE/D,OADAC,QAAQC,IAAIP,EAAOG,GAEnB,kBAACK,EAAA,EAAD,CACIC,QAASJ,EAAMI,QACfC,UAAS,kBAAaP,GAAU,oBAAvB,YACTC,GAAS,iBAGT,kBAACO,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GACzCd,GAEL,wBAAIU,UAAS,0BAAqBN,GAAS,0BACtCH,GAEL,kBAACW,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,iBACxCX,EADL,a,sEChBFa,EAAkB,CACpBd,MAAO,CACHe,IAAK,UACLC,WAAY,KAEhBC,UAAW,CACPF,IAAK,UACLC,WAAY,MAEhBE,OAAQ,CACJH,IAAK,UACLC,WAAY,MAGPG,EAAW,SAACC,GACrB,IAAIC,EAAU,YAAOD,GAUrB,OARAC,EAAWC,MAAK,SAACC,EAAEC,GACf,OAAGD,EAAEvB,MAAQwB,EAAExB,OACH,EAGD,KAGRqB,GAGEI,EAAkB,SAACC,GAAD,OAC3BA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,MCdjCC,MAdf,YAAsD,IAAvCC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,KACzC,OACA,yBAAKxB,UAAU,OACf,kBAAC,IAAD,CAAYuB,OAAQA,EAAQC,KAAMA,GAC9B,kBAACC,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2ED0BK,SAAChB,GAAD,IAAMW,EAAN,uDAAgB,QAAhB,OACzBX,EAAKiB,KAAI,SAAAC,GAAO,OACZ,kBAACC,EAAA,EAAD,CACIP,OAAQ,CAACM,EAAQE,YAAYC,IAAKH,EAAQE,YAAYE,MACtD9B,MAAOE,EAAgBiB,GAAWhB,IAClC4B,UAAW7B,EAAgBiB,GAAWhB,IACtC6B,YAAa,GACbC,OACIC,KAAKC,KAAKT,EAAQP,IAAcjB,EAAgBiB,GAAWf,YAGnE,kBAACgC,EAAA,EAAD,KACA,yBAAKvC,UAAU,kBACf,yBAAKA,UAAU,YACfwC,MAAO,CAAEC,gBAAgB,OAAD,OAASZ,EAAQE,YAAYW,KAA7B,QAExB,yBAAK1C,UAAU,aAAa6B,EAAQA,SACpC,yBAAK7B,UAAU,kBAAf,UACQkB,IAAQW,EAAQtC,OAAO4B,OAAO,QAEtC,yBAAKnB,UAAU,kBAAf,cACYkB,IAAQW,EAAQrB,WAAWW,OAAO,QAE9C,yBAAKnB,UAAU,eAAf,WACSkB,IAAQW,EAAQpB,QAAQU,OAAO,cChDvCwB,CAActB,EAAWC,M,OCMnBsB,MAff,YAA+B,IAAdvB,EAAa,EAAbA,UACb,OACI,yBAAKrB,UAAU,SACVqB,EAAUO,KAAI,gBAAEC,EAAF,EAAEA,QAAStC,EAAX,EAAWA,MAAX,OACX,4BACI,4BAAKsC,GACL,4BACI,gCAASX,IAAQ3B,GAAO4B,OAAO,e,QCPjD0B,EAAU,CACZC,OAAQ,CACJC,SAAS,GAEbC,SAAU,CACNC,OAAQ,CACJb,OAAQ,IAGhBc,qBAAqB,EACrBC,SAAU,CACNC,KAAM,QACNC,WAAW,EACXC,UAAW,CACPC,MAAO,SAAUC,EAAa7C,GAC1B,OAAOO,IAAQsC,EAAYC,OAAOtC,OAAO,WAIrDuC,OAAQ,CACJC,MAAO,CACP,CACIC,KAAM,OACNC,KAAM,CACN1C,OAAQ,WACR2C,cAAe,QAInBC,MAAO,CACP,CACIC,UAAW,CACXjB,SAAS,GAETkB,MAAO,CAEPC,SAAU,SAAUT,EAAOU,EAAOC,GAC9B,OAAOlD,IAAQuC,GAAOtC,OAAO,YAOnCkD,EAAiB,SAAC1D,EAAMW,GAC1B,IACIgD,EADAC,EAAY,GAEhB,IAAK,IAAIC,KAAQ7D,EAAKpB,MAAO,CAC7B,GAAI+E,EAAe,CACf,IAAIG,EAAe,CACnBC,EAAGF,EACHG,EAAGhE,EAAKW,GAAWkD,GAAQF,GAE3BC,EAAUK,KAAKH,GAEnBH,EAAgB3D,EAAKW,GAAWkD,GAEhC,OAAOD,GAqCAM,MAnCX,YAA2C,IAAD,IAArBvD,iBAAqB,MAAX,QAAW,IACdwD,mBAAS,IADK,mBAC/BnE,EAD+B,KACzBoE,EADyB,KAgBtC,OAdAC,qBAAU,YACK,uCAAG,sBAAAlE,EAAA,sEACRmE,MAAM,8DACXC,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACvE,GACH,IAAI4D,EAAYF,EAAe1D,EAAMW,GACrCyD,EAAQR,GACR3E,QAAQC,IAAI0E,MARF,2CAAH,qDAWfc,KACG,CAAC/D,IAEJ,8BACS,OAAJX,QAAI,IAAJA,OAAA,EAAAA,EAAM2E,QAAS,GAChB,kBAAC,OAAD,CACI3E,KAAM,CACN4E,SAAU,CACN,CACAC,gBAAiB,yBACjBC,YAAa,UACb9E,KAAMA,KAIVkC,QAASA,M,OCkCV6C,MApHf,WAAgB,IAAD,EAEqBZ,mBAAS,IAF9B,mBAENzD,EAFM,KAEKsE,EAFL,OAGiBb,mBAAS,aAH1B,mBAGNjD,EAHM,KAGG+D,EAHH,OAIyBd,mBAAS,IAJlC,mBAIN/C,EAJM,KAIO8D,EAJP,OAKqBf,mBAAS,IAL9B,mBAKNgB,EALM,KAKKC,EALL,OAMqBjB,mBAAS,CAAE9C,IAAK,SAAUgE,KAAM,UANrD,mBAMNC,EANM,KAMKC,EANL,OAOiBpB,mBAAS,GAP1B,mBAONqB,EAPM,KAOGC,EAPH,OAQ2BtB,mBAAS,IARpC,mBAQNuB,EARM,KAQQC,EARR,OASqBxB,mBAAS,SAT9B,mBASNxD,EATM,KASKiF,EATL,KAYbvB,qBAAU,WACRC,MAAM,sCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAvE,GACJkF,EAAelF,QAEhB,IAEHqE,qBAAU,YACc,uCAAG,sBAAAlE,EAAA,sEACjBmE,MAAM,4CACXC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACvE,GACL,IAAMU,EAAYV,EAAKiB,KAAI,SAACC,GAAD,MACzB,CACE2E,KAAM3E,EAAQA,QACd4B,MAAO5B,EAAQE,YAAY0E,SAGzB7F,EAAaF,EAASC,GAC1BoF,EAAanF,GACb0F,EAAgB3F,GAChBgF,EAAatE,MAbM,2CAAH,qDAgBtBqF,KACC,IAGH,IAAMC,EAAe,uCAAG,WAAMC,GAAN,iBAAA9F,EAAA,6DAChB+F,EAAcD,EAAEE,OAAOrD,MACvB/B,EAAsB,cAAhBmF,EAA8B,qCAA9B,mDAAiHA,GAFvG,SAGhB5B,MAAMvD,GACXwD,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACvE,GACLiF,EAAWiB,GACXhB,EAAelF,GACfuF,EAAa,CAACvF,EAAKoB,YAAYC,IAAKrB,EAAKoB,YAAYE,OACrDmE,EAAW,MATS,2CAAH,sDAYrB,OACE,yBAAKpG,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,eACb,gDACA,kBAAC+G,EAAA,EAAD,CAAa/G,UAAU,iBACrB,kBAACgH,EAAA,EAAD,CAAQC,QAAQ,WAAWC,SAAUP,EAAiBlD,MAAO5B,GAC7D,kBAACsF,EAAA,EAAD,CAAU1D,MAAM,aAAhB,aAEEpC,EAAUO,KAAI,SAAAC,GAAO,OACnB,kBAACsF,EAAA,EAAD,CAAU1D,MAAO5B,EAAQ4B,OAAQ5B,EAAQ2E,YAOjD,yBAAKxG,UAAU,cACX,kBAAC,EAAD,CACED,QAAS,SAAC6G,GAAD,OAAOL,EAAa,UAC7BjH,MAAM,oBACNI,OAAK,EACLD,OAAsB,UAAd6B,EACR/B,MAAOyB,EAAgBe,EAAYqF,YACnC5H,MAAO0B,IAAQa,EAAYxC,OAAO4B,OAAO,UAE3C,kBAAC,EAAD,CACEpB,QAAS,SAAC6G,GAAD,OAAOL,EAAa,cAC7BjH,MAAM,YACNG,OAAsB,cAAd6B,EACR/B,MAAOyB,EAAgBe,EAAYsF,gBACnC7H,MAAO0B,IAAQa,EAAYvB,WAAWW,OAAO,UAE/C,kBAAC,EAAD,CACEpB,QAAS,SAAC6G,GAAD,OAAOL,EAAa,WAC7BjH,MAAM,SACNI,OAAK,EACLD,OAAsB,WAAd6B,EACR/B,MAAOyB,EAAgBe,EAAYuF,aACnC9H,MAAO0B,IAAQa,EAAYtB,QAAQU,OAAO,WAG9C,kBAAC,EAAD,CACAE,UAAWgF,EACX/E,UAAWA,EACXC,OAAQ0E,EACRzE,KAAM2E,KAGR,kBAACrG,EAAA,EAAD,CAAME,UAAU,cACZ,kBAACC,EAAA,EAAD,KACA,yBAAKD,UAAU,oBACb,qDACA,kBAAC,EAAD,CAAOqB,UAAWyE,IAClB,6CAAmBxE,GACnB,kBAAC,EAAD,CAAWA,UAAWA,SC1GdiG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3I,QAAQ2I,MAAMA,EAAMC,a","file":"static/js/main.d2631da4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n    console.log(title, active);\r\n    return (\r\n    <Card\r\n        onClick={props.onClick}\r\n        className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n        }`}\r\n    >\r\n        <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n            {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n            {cases}\r\n        </h2>\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n            {total} Total\r\n        </Typography>\r\n        </CardContent>\r\n    </Card>\r\n    );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport  numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 2000,\r\n    },\r\n  };\r\nexport const sortData = (data) => {\r\n    let sortedData = [...data];\r\n\r\n    sortedData.sort((a,b) => {\r\n        if(a.cases > b.cases){\r\n            return -1;\r\n        }\r\n        else{\r\n            return 1;\r\n        }\r\n    });\r\n    return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n//Draw circles on the map with interactive tooltop\r\nexport const showDataOnMap = (data,casesType=\"cases\") => (\r\n    data.map(country =>(\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            fillOpacity={0.4}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n        <Popup>\r\n        <div className=\"info-container\">\r\n        <div className=\"info-flag\"\r\n        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n        ></div>\r\n        <div className=\"info-name\">{country.country}</div>\r\n        <div className=\"info-confirmed\">\r\n        Cases: {numeral(country.cases).format(\"0,0\")}\r\n        </div>\r\n        <div className=\"info-recovered\">\r\n        Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n        </div>\r\n        <div className=\"info-deaths\">\r\n        Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n        </div>\r\n        </div>\r\n    </Popup>\r\n        </Circle>\r\n    ))\r\n);","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n    <div className=\"map\">\r\n    <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n    </LeafletMap>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport'./Table.css';\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        points: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n        {\r\n            type: \"time\",\r\n            time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n            },\r\n        },\r\n        ],\r\n        yAxes: [\r\n        {\r\n            gridLines: {\r\n            display: false,\r\n            },\r\n            ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n                return numeral(value).format(\"0a\");\r\n            },\r\n            },\r\n        },\r\n        ],\r\n    },\r\n    };\r\n    const buildChartData = (data, casesType) => {\r\n        let chartData = [];\r\n        let lastDataPoint;\r\n        for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n            x: date,\r\n            y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n    };      \r\n    function LineGraph({ casesType=\"cases\" }) {\r\n        const [data, setData] = useState({});\r\n        useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                let chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n                console.log(chartData);\r\n            });\r\n        };      \r\n        fetchData();\r\n        }, [casesType]);      \r\n        return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n            <Line\r\n                data={{\r\n                datasets: [\r\n                    {\r\n                    backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                    borderColor: \"#CC1034\",\r\n                    data: data,\r\n                    },\r\n                ],\r\n                }}\r\n                options={options}\r\n            />\r\n            )}\r\n        </div>\r\n        );\r\n    } \r\nexport default LineGraph;","import React, { useState,useEffect } from 'react';\nimport './App.css';\nimport { FormControl, MenuItem, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat  } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\nimport numeral from \"numeral\";\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async() => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,            // United States , India, United Kingdom\n            value: country.countryInfo.iso2   //UK , USA, IND \n          }));\n\n          let sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n      });\n    };   \n    getCountriesData();\n  }, []);\n\n\n  const onCountryChange = async(e) => {\n    const countryCode = e.target.value;\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n        <h1>COVID-19 TRACKER</h1>\n        <FormControl className=\"app__dropdown\">\n          <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n          <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n          {\n            countries.map(country => (\n              <MenuItem value={country.value}>{country.name}</MenuItem>  \n            ))\n          }\n          </Select>\n        </FormControl>\n      </div>\n      \n      <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map \n        countries={mapCountries}\n        casesType={casesType}\n        center={mapCenter}\n        zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n          <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n          </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}